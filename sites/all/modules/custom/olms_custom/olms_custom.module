<?php
/*
function olms_custom_form_node_form_alter(&$form, &$form_state, $form_id)
{
//dpm($form);
unset($form['field_issue_date']);
drupal_set_message("This is base form");
}

function olms_custom_form_alter(&$form, &$form_state, $form_id)
{
//dpm($form);
unset($form['field_issue_date']);
drupal_set_message("This is general form");
}*/

function olms_custom_form_book_issue_node_form_alter(&$form, &$form_state,
$form_id)
{

//$form['field_fine_amount']['und']['#size'] = 60;
unset($form['field_expected_return_date']);
//dpm($form);
}
function olms_custom_node_validate($node, $form, &$form_state) {
if($form['#form_id'] == "book_issue_node_form")
{
$node_id=$form_state['values']['field_book_name']['und'][0]['target_id'];

$nod=node_load($node_id);
$t_id=$nod->field_category['und'][0]['target_id'];
$nod1=taxonomy_term_load($t_id);
$term=$nod1->name;
if($term=="Fiction")
{
$issue_date =
$form['field_issue_date']['und'][0]['#value']['value']['date'];
//$test=explode("/", $issue_date);
//$date=$test[1]+7;
//$full_date=test[0]
$show_date=strtotime(date("Y-m-d", strtotime($issue_date)) . "+7 days");
$show_date1=date('Y-m-d', $show_date);
//drupal_set_message($show_date1);
$form_state['values']['field_expected_return_date']['und'][0]['value']
= $show_date1;
//$get_item=$form['field_book_name']['und']['#options'][2];

}
else
{
$issue_date =
$form['field_issue_date']['und'][0]['#value']['value']['date'];
//$test=explode("/", $issue_date);
//$date=$test[1]+7;
//$full_date=test[0]
$show_date=strtotime(date("Y-m-d", strtotime($issue_date)) . "+14
days");
$show_date1=date('Y-m-d', $show_date);
//drupal_set_message($show_date1);
$form_state['values']['field_expected_return_date']['und'][0]['value']
= $show_date1;
}
dpm($nod1);
}
}

function olms_custom_menu()
{
$item=array();
$item['olms/increse_book_quantity']=array(
'title' => 'Book Quantity(+)',
'description' => 'Book Quantity Increse',
'page callback' => 'drupal_get_form',
'page arguments' => array('increse_quantity'),
'access callback' => TRUE
);
$item['olms/return_book']=array(
'title' => 'Return Books',
'description' => 'Reccive return Books',
'page callback' => 'user_access',
'page arguments' => array('return_book'),
'access callback' => TRUE

);
$item['olms/books_by_member'] = array(
'title' => 'Borrowed Books by members',
'page callback' => 'drupal_get_form',
'description' => 'Reccive return Books',
'page arguments' => array('sort_by_member'),
'access callback' => TRUE
);
$item['reccive_data'] = array(
'page callback' => 'test_ajaxCallHandler',
'page arguments' => array('sort_by_member'),
'access callback' => TRUE,
'type' => MENU_CALLBACK
);

return $item;

}
function test_ajaxCallHandler()
{
	//echo "The Is:- ".$_GET['id'];
	$uid = $_GET['id'];
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type','node')
	->entityCondition('bundle','book_issue')
	->propertyCondition('status',1)
	->fieldCondition('field_member','target_id',$uid,'=')
	;
	$result = $query->execute();
	$book_issue_nids = array_keys($result['node']);
	$book_issue_entites = entity_load('node',$book_issue_nids);


	?>
			<table class="users">
			 <thead>
		    <tr>
		      <th class="row-1 row-ID">BOOK NAME</th>
		      <th class="row-2 row-name">ISSUE DATE</th>
		     <!-- <th class="row-3 row-job">Job</th>
		      <th class="row-4 row-email">Email<th>!-->
		    </tr>
		  </thead>
		  <tbody>
		  	  
 	<?php
 		foreach ($book_issue_entites as $be) {
 		
 		$book_entity = entity_load('node',array($be->field_book_name['und'][0]['target_id']));
 		$eb = array_shift($book_entity);
 		//dpm($book_entity);
 		if($be->field_return_date == NULL)
 		{

 	?>
		    <tr>
		      <td><?php echo $eb->title;  ?></td>
		      <td><?php echo $be->field_issue_date['und'][0]['value']; ?></td>
		      <!--<td>Robotin'</td>
		      <td>need@input.com</td>!-->
		    </tr>
	<?php
		}
		}
	?>
		  </tbody>
		</table>
	<?php
}
function increse_quantity($form,&$form_state)
{
//dpm($form);
$form['book_name']=array(
'#type' => 'textfield',
'#title' => 'Enter Book Name',
'#required' => TRUE
);
$form['book_quantity']=array(
'#type' => 'textfield',
'#title' => 'Enter book Qunatity',
'#required' => TRUE
);
$form['submit_button'] = array(
'#type' => 'submit',
'#value' => t('Click Here!')
);
//dpm($form);
return $form;

}
function increse_quantity_submit($form, &$form_state) {
//drupal_set_message('sdfsdfsd');

$book_name = $form_state['values']['book_name'];
$book_quantity = $form_state['values']['book_quantity'];
$query = new EntityFieldQuery();

$query->entityCondition('entity_type', 'node')
->entityCondition('bundle', 'book')
->propertyCondition('status', 1)
->propertyCondition('title', $book_name);

$result = $query->execute();
//dpm($result);

if (isset($result['node'])) {
$book_nids = array_keys($result['node']);
$book_entities = entity_load('node', $book_nids);
//dpm($book_nids);
//dpm($book_entities);
$book_node = array_shift($book_entities);
$old_qty = $book_node->field_no_of_books['und'][0]['value'];
$total_quntity=$old_qty + $book_quantity;
$book_node->field_no_of_books['und'][0]['value']=$total_quntity;
entity_save('node', $book_node);
//drupal_set_message($old_qty);
///dpm($total_quntity);*/
}

}

function return_book($form,&$form_state)
{

$books = olms_custom_book_select();
$user = omls_custom_select_users();
$date = '';
$format = 'Y-m-d';
$form['book_name'] = array(
'#type' => 'select',
'#title' => t('Selected'),
'#options' => $books,
);
/*$form['borrower_name']=array(
'#type' => 'textfield',
'#title' => 'Enter Borrower Name',
'#required' => TRUE
);*/
$form['borrower_name'] = array(
'#type' => 'select',
'#title' => t('Selected'),
'#options' => $user,

'#description' => t('Set this to <em>Yes</em> if you would like 
this category to be selected by default.'),
);
$form['return_date']=array(
'#type' => 'date_popup',
'#title' => 'Enter Return Date',
'#default_value' => $date,
'#date_format' => $format,
'#required' => TRUE
);
$form['submit_button']=array(
'#type' => 'submit',
'#value' => t('Return')
);

return $form;

}

function omls_custom_select_users()
{
$query = new EntityFieldQuery();
$query->entityCondition('entity_type','user');
$result = $query->execute();
$user_ids = array_keys($result['user']);
$user_entities = entity_load('user',$user_ids);
$users;
$i=0;
//dpm($user_entities);

foreach ($user_entities as $ue) {
//dpm($ue);
$uid = $ue->uid;
$name = $ue->name;
//$user[$i]=array($uid => $name);
if($name != "")
{
$role_ids=array_keys($ue->roles);
//dpm($ue);
if($role_ids[1] == 4)
{
$user[$uid] = $name;
//$user= array($uid => $name);
}
}
//$i++;
//dpm($ue);
//dpm($ue->roles);
}
//dpm($user_entities);
//dpm($user);
return $user;
}
function olms_custom_book_select()
{
$query = new EntityFieldQuery();
$query->entityCondition('entity_type','node')
->entityCondition('bundle','book')
->propertyCondition('status',1);
$result = $query->execute();
$book_nids = array_keys($result['node']);
$book_entities = entity_load('node',$book_nids);
//$i=0;
foreach ($book_entities as $be) {
$books[$be->title] = $be->title;
//$i++;
//dpm($books);
}
//dpm($book_entities);
return $books;
}
function return_book_submit($form,&$form_state)
{
///dpm($form_state);
	//dpm(drupal_get_path('module/custom','olms_custom'));
	
	//drupal_set_message(drupal_get_path('modules/custom','olms_custom'));
$book_name=$form_state['values']['book_name'];
dpm($book_name);
$borrower_name=$form_state['values']['borrower_name'];
$return_date=$form_state['values']['return_date'];
$full_date=$return_date." 00:00:00";
//dpm($return_date);
//entity Querry Type Object declare
$query=new EntityFieldQuery();

//entity Querry conditions declare
$query->entityCondition('entity_type','node')
->entityCondition('bundle','book')
->propertyCondition('status', 1)
->propertyCondition('title', $book_name);
//entity Querry Execute

$result = $query->execute();
//check result are return a node type or not
if(isset($result['node']))
{

$node_ids = array_keys($result['node']);//taking book nids using array_keys function

$query2 = new EntityFieldQuery();//entity Querry Type Object declare to fetch Book Issue Nid

//entity Querry conditions declare
$query2->entityCondition('entity_type','node')
->entityCondition('bundle','book_issue')
->propertyCondition('status',1)
->fieldCondition('field_book_name','target_id',$node_ids[0],'=')
;

$result2 = $query2->execute();//entity Querry Execute
//dpm($result2);
$book_issue_ids = array_keys($result2['node']);//taking Book_issue nids using array_keys function

$book_issue_entites = 
entity_load('node',$book_issue_ids);//load book_issue bundle by nid
foreach($book_issue_entites as $en)
{
	
	if($en->field_return_date == NULL)
	{
		$en->field_return_date['und']['0']['value']=$full_date;
		dpm($en);
	}

}
//$book_issue_entites[$book_issue_ids[0]]->field_return_date['und']['0']['value'] = $full_date;//assign a new value to field_return_date (field)
//dpm($book_issue_entites);
//entity_save('node',$book_issue_entites[$book_issue_ids[0]]);//here we save the modified book_issued entity
//entity_save('node',$en);
//dpm($book_issue_entites);


/*------- Now We Increse Book Qunatity--------*/

$book_entities = entity_load('node',$node_ids);//we load book type node by nid

$new_quan=$book_entities[$node_ids[0]]->field_no_of_books['und'][0]['value'] + 1; //here we add 1 with old book quantity and store a new book quantity in $new_quan
//	dpm($new_quan);

$book_entities[$node_ids[0]]->field_no_of_books['und'][0]['value']=$new_quan;
// here we insert new quantity into field_no_of_books

//entity_save('node',$book_entities[$node_ids[0]]);//here we save the modified book entity
//dpm($book_entities);
}


}
function olms_custom_menu_alter(&$items) {
//$items['return_book']['menu_name'] = 'menu-master-menu';


return $items;
}
function sort_by_member($form,&$form_state)
{
$menbers = omls_custom_select_users();
$form['select_member'] = array(
'#type' => 'select',
'#title' => 'Select Member',
'#options' => $menbers
);
$form['submit_button'] = array(
'#type' => 'submit',
'#value' => 'Sort'
);
drupal_add_js("http://localhost/olms/sites/all/modules/custom/olms_custom/custom_java.js");
drupal_add_css("http://localhost/olms/sites/all/modules/custom/olms_custom/table.css");
$form['#suffix'] = '<input type="button" id="testbutton" value="testjs" /><input type="button" id="cprint" value="print" /><br /><div id="testdiv"></div> ';
return $form;
}
function sort_by_member_submit($form,&$form_state)
{
$uid = $form_state['values']['select_member'];
$query = new EntityFieldQuery();
$query->entityCondition('entity_type','node')
->entityCondition('bundle','book_issue')
->propertyCondition('status',1)
->fieldCondition('field_member','target_id',$uid,'=')
;
$result = $query->execute();
$book_issue_nids = array_keys($result['node']);
$book_issue_entites = entity_load('node',$book_issue_nids);
foreach ($book_issue_entites as $be) {
 		
 		$book_entity = entity_load('node',array($be->field_book_name['und'][0]['target_id']));
 		$eb = array_shift($book_entity);
 		dpm($eb);
//dpm($book_issue_entites);
//dpm($form_state);
 	}
}
function olms_custom_boot()
{
	global $base_url;
	global $page;
	$full_url = $base_url ."/". "book-display";
	$c_path = $_GET['q'];
	$check_url = $base_url . "/" . $c_path;
	//drupal_set_message($check_url);
	//drupal_set_message($full_url);
	//drupal_add_js("http://localhost/olms/sites/all/modules/custom/olms_custom/custom_java.js");
	if($check_url == $full_url)
	{
		echo "<script type='text/javascript' src='http://localhost/olms/sites/all/modules/custom/olms_custom/custom_java.js'></script>";
		//drupal_add_js("http://localhost/olms/sites/all/modules/custom/olms_custom/custom_java.js");
		drupal_set_message('<input type="button" id="vprint" value="Print" onclick="test()" />');

		?>

		<script>
			jQuery(document).ready(function(){
				//jQuery("#content").append("<input type='button' id='vprint1' value='Print' />");
				//jQuery("#vprint").click(function(){
				//alert("asdasS");
				//});
			});
		</script>
		<?php
	}
}
function olms_custom_node_insert($node)
{
//drupal_set_message($node->nid);
//$nod_id=$node->nid;
/*$query = new EntityFieldQuery(); $query->entityCondition('entity_type',
'node') ->entityCondition('bundle', 'book_issue')
->propertyCondition('status', 1) ->fieldCondition('field_book_name',
'entity_id', '$nod_id', '=');
$result = $query->execute();
/*if (isset($result['node']))
{
$book= array_shift($result['node']); //$
$news_items = entity_load('node', $book);
$node_id=$news_items->field_field_book['und'][0]['target_id'];
drupal_set_message($node_id);
}*/
//dpm($node);
}

/*function increse_quantity_validate($form, &$form_state) {

//if($form_state['values']['book_quantity'] == 0)
//{
drupal_set_message("erter");
// }
}*/

    